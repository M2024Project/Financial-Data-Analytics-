acf(residuals(fit2))
fit3 = arima(unemp, order=c(1,0,0),seasonal = list(order = c(1,0,1), period = 4), xreg=cbind(invest,government))
print(fit3)
acf(residuals(fit3))
par(mfrow=c(1,1))
coeftest(fit1,vcov(fit1))
coeftest(fit1, vcov = NeweyWest(fit1))
coeftest(fit1, vcov = vcovHAC(fit1))
coeftest(fit3, vcov = fit3$var.coef)
###########  Volatility ######
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#This command sets the working directory to the directory of the R script
######### Example: Daily BMW stock log returns
########## Slide 20    ########
library(rugarch)
data(bmw, package="evir")
arma.garch.norm = ugarchspec(mean.model=list(armaOrder=c(1,0)),
variance.model=list(garchOrder=c(1,1)))
bmw.garch.norm = ugarchfit(data=bmw, spec=arma.garch.norm)
show(bmw.garch.norm)
length(bmw)
plot(bmw.garch.norm, which="all")
# Generating selected plots
par(mfrow = c(3,2))
for(i in c(1,3,10,11,8,9)) plot(bmw.garch.norm, which=i)
par(mfrow = c(1,2))
for(i in c(1,3)) plot(bmw.garch.norm, which=i)
par(mfrow = c(1,2))
for(i in c(10,11)) plot(bmw.garch.norm, which=i)
par(mfrow = c(1,2))
for(i in c(8,9)) plot(bmw.garch.norm, which=i)
########## Slide 27    ########
# fit t distribution
library(MASS)
e = residuals(bmw.garch.norm, standardize=TRUE)
fitdistr(e,"t")
n = length(e)
grid = (1:n)/(n+1)
par(mfrow=c(1,1))
qqplot(sort(as.numeric(e)), qt(grid,df=4),
main="t-plot, df=4",xlab= "Standardized residual quantiles",
ylab="t-quantiles")
abline(   lm(   qt(c(.25,.75),df=4)~quantile(e,c(.25,.75))   )   )
########## Slide 29    ########
#Fit Garch with t distribution
arma.garch.t = ugarchspec(mean.model=list(armaOrder=c(1,0)),
variance.model=list(garchOrder=c(1,1)),
distribution.model = "std")
bmw.garch.t = ugarchfit(data=bmw, spec=arma.garch.t)
show(bmw.garch.t)
#
par(mfrow = c(3,2))
for(i in c(1,3,10,11,8,9)) plot(bmw.garch.t, which=i)
#
#Squared residuals
data(bmw,package="evir")
res = residuals(arima(bmw,order=c(1,0,0)))
acf(res^2)
########## Slide 41    ########
#Fitting Aparch model
arma.aparch.t = ugarchspec(mean.model=list(armaOrder=c(1,0)),
variance.model=list(model="apARCH",
garchOrder=c(1,1)),
distribution.model = "std")
bmw.aparch.t = ugarchfit(data=bmw, spec=arma.aparch.t)
show(bmw.aparch.t)
#Generating selected plots
par(mfrow = c(3,2))
for(i in c(1,3,10,11,8,9)) plot(bmw.aparch.t, which=i)
par(mfrow = c(1,2))
for(i in c(1,3)) plot(bmw.aparch.t, which=i)
par(mfrow = c(1,2))
for(i in c(10,11)) plot(bmw.aparch.t, which=i)
par(mfrow = c(1,2))
for(i in c(8,9)) plot(bmw.aparch.t, which=i)
########## Slide 51    ########
#Forecasting GARCH models
library(rugarch)
data(bmw, package="evir")
n = length(bmw) ; n
date = attr(bmw,"time")
#year = 1973 + (1996 + 7/12 - 1973)*(1:n)/n
origin1 = 4100
date[origin1]
origin2 = 3880
date[origin2]
nahead = 1500
#Prediction using all data
garch.norm = ugarchspec(mean.model=list(armaOrder=c(0,0)),
variance.model=list(garchOrder=c(1,1)))
bmw.garch.norm = ugarchfit(data=bmw, spec=garch.norm)
bmwforecast=ugarchforecast(bmw.garch.norm, data = bmw, n.ahead = 30)
show(bmwforecast)
plot(bmwforecast)
####################################################################
############  Factor Models  ###############
####################################################################
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#This command sets the working directory to the directory of the R script
############  Example: Microsoft Returns   ###############
############  Slide 18   ###############
dat = read.csv("capm2.csv",header=T)
attach(dat)
n = dim(dat)[1]
EX_R_sp500 = Close.sp500[2:n]/Close.sp500[1:(n-1)] - 1  - Close.tbill[2:n]/(100*253)
EX_R_msft = Close.msft[2:n]/Close.msft[1:(n-1)] - 1  - Close.tbill[2:n]/(100*253)
fit = lm(EX_R_msft~EX_R_sp500)
options(digits=3)
summary(fit)
fit_NoInt = lm(EX_R_msft~EX_R_sp500-1)
options(digits=3)
summary(fit_NoInt)
############  In-Class Exercise: Treasury Yields   ###############
############  Slide 91   ###############
datNoOmit = read.table("treasury_yields.txt",header=T)
diffdatNoOmit = diff(as.matrix(datNoOmit[,2:12]))
dat=na.omit(datNoOmit)
diffdat = na.omit(diffdatNoOmit)
n = dim(diffdat)[1]
options(digits=3)
pca = prcomp(diffdat,5)
summary(pca)
time = c(1/12,.25,.5,1, 2, 3, 5, 7, 10, 20, 30)
plot(time,pca$rotation[,1],type="b",ylim=c(-.8,.8),ylab="PC")
lines(time,pca$rotation[,2],type="b")
lines(time,pca$rotation[,3],type="b")
plot(time,pca$rotation[,1],type="b",ylim=c(-.8,.8),xlim=c(0,3),ylab="PC")
lines(time,pca$rotation[,2],type="b")
lines(time,pca$rotation[,3],type="b")
par(mfrow=c(2,2))
time = c(1/12,.25,.5,1, 2, 3, 5, 7, 10, 20, 30)
plot(time,as.vector(dat[1,2:12]),ylim=c(0,6),type="b",lty=1,lwd=2,
ylab="Yield",xlab="T",main="(a)") #,log="x",xaxs="r")
lines(time,as.vector(dat[486,2:12]),type="b",lty=2,lwd=2,col="red")
lines(time,as.vector(dat[n+2,2:12]),type="b",lty=3,lwd=2,col="blue")
legend("bottomright",c("07/31/01","07/02/07","10/31/08"),lty=c(1,2,3),lwd=2,
cex=1, col=c("black","red","blue"))
plot(pca,main="(b)")
plot(time,pca$rotation[,1],lty=1,ylim=c(-.8,.8),type="b",lwd=2,ylab="PC",xlab="T",
main="(c)")
lines(time,pca$rotation[,2],lty=2,type="b",lwd=2,col="red")
lines(time,pca$rotation[,3],lty=3,type="b",lwd=2,col="blue")
lines(0:30,0*(0:30),lwd=1)
legend("bottomright",c("PC 1","PC 2","PC 3"),lty=c(1,2,3),lwd=2,col=c("black","red","blue"))
plot(time,pca$rotation[,1],ylim=c(-.8,.8),type="b",lwd=2,ylab="PC",xlab="T",
xlim=c(0,3),main="(d)")
lines(time,pca$rotation[,2],lty=2,type="b",lwd=2,col="red")
lines(time,pca$rotation[,3],lty=3,type="b",lwd=2,col="blue")
lines(0:30,0*(0:30),lwd=1)
legend("bottomright",c("PC 1","PC 2","PC 3"),lty=c(1,2,3),lwd=2,col=c("black","red","blue"))
plot(pca$rotation[,1])
plot(pca$rotation[,2])
plot(pca$rotation[,3])
# Time-series plot of PCA factors
par(mfrow=c(1,3))
for (i in 1:3){
plot(pca$x[,i],main=paste("PC",toString(i)),xlab="day",
ylab="")
}
#Autocorrelation of PCA factors
acf(pca$x[,1:3],ylab="",xlab="lag")
############  Slide 97   ###############
fa_treasury = factanal(diffdat,factors=3)
print(fa_treasury)
############  In-Class Exercise: Equity Funcs   ###############
############  Slide 100   ###############
equityFunds = read.csv("equityFunds.csv")
equityFunds[1:10,]
pairs(equityFunds[,2:9])
pcaEq = prcomp(equityFunds[,2:9])
summary(pcaEq)
par(mfrow=c(1,2))
plot(pcaEq,main="(a)")
Names = names(equityFunds)[2:9]
plot(pcaEq$rotation[,1],type="b",ylab="PC",lwd=2,ylim=c(-1.4,2),main="(b)")
lines(pcaEq$rotation[,2],type="b",lty=2,lwd=2,col="red")
lines(pcaEq$rotation[,3],type="b",lty=3,lwd=2,col="blue")
lines(0:9,0*(0:9))
legend("top",c("PC1","PC2","PC3"),lty=c(1,2,3),lwd=2,cex=.65,col=c("black", "red", "blue"))
text(4.35,-1.25, "   EASTEU   LATAM   CHINA   INDIA   ENERGY   MINING   GOLD   WATER",cex=.38)
############  In-Class Exercise: Dow Jones   ###############
############  Slide 102   ###############
DowJones30 = read.csv("DowJones30.csv")
pcaDJ = prcomp(DowJones30[,2:31])
summary(pcaDJ)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#This command sets the working directory to the directory of the R script
#If you use a windows computer please click on "Session" and "Set Working Directory" "To Source File Location"
### Problem 1
da=read.table("d-sbux3dx-0715.txt",header=T)
head(da)
rtn=da[,3:6]
attach(rtn)
require(fBasics)
# (a)
basicStats(SBUX)
basicStats(vwretd)
basicStats(ewretd)
basicStats(sprtrn)
# (b)
densitySBUX=density(rtn$SBUX)
plot(densitySBUX)
# This is the same density plot but with labels
plot(densitySBUX,xlab='return',ylab='SBUX',main='Density')
normalTest(SBUX)
# (c)
lrtn=log(rtn+1)  ### log returns
basicStats(lrtn$SBUX)
basicStats(lrtn$vwretd)
basicStats(lrtn$ewretd)
basicStats(lrtn$sprtrn)
# (d)
t.test(lrtn$SBUX)
t.test(lrtn$sprtrn)
# (e)
densitylogSBUX=density(lrtn$SBUX)
densitylogvwretd=density(lrtn$vwretd)
par(mfcol=c(1,2))  ## Put two plots in a frame (left and right)
plot(densitylogSBUX,xlab='log-return',ylab='SBUX',main='Density')
plot(densitylogSBUX,xlab='log-return',ylab='vw index',main='Density')
par(mfcol=c(1,1))
## Problem 2
da <- read.table("d-exuseu-0516.txt",header=T)
head(da)
# (a)
rtn=diff(log(da$euro))  ## Compute log return
# (b)
basicStats(rtn)
# (c)
densityEX=density(rtn)
plot(densityEX,xlab="ln-rtn",ylab='euro',main='Density EX')
# (d)
t.test(rtn)
# (e)
normalTest(rtn)
qqnorm(rtn) # Quantile-quantile plot
qqline(rtn) # Include a line in the quantile-quantile plot.
# If empirical values are normally distributed
# then the quantiles should all be on the line.
### Problem 3
da=read.table("m-COILWTICO.txt",header=T)
head(da)
# (a)
oil=da$VALUE
doil=diff(oil)
dim(da)
# (b)
tdx <- c(1:362)/12+1986
plot(tdx,oil,xlab='year',ylab='coil',type='l')
plot(tdx[-1],doil,xlab='year',ylab='diff(oil)',type='l')
# (c)
# If you have not installed the package fUnitRoots please use the following command:
#install.packages("fUnitRoots")
require(fUnitRoots)
adfTest(oil,lags=11,type="c")
adfTest(doil,lags=11,type="c")
# (d)
acf(oil)
pacf(oil)
acf(doil)
pacf(doil)
# (e)
Box.test(doil,lag=12,type="Ljung")
# (f)
library("forecast")
ARoil=arima(doil,c(6,0,0))
ARoil
tsdiag(ARoil)
# You can also use the auto.arima command to fit an AR model
# ARoil2=auto.arima(doil,max.p = 20, max.q = 0,  d = 0)
# ARoil2
# tsdiag(ARoil2)
# (f)
#You can use the auto.arima command to fit an ARMA model
# ARIMAoil=auto.arima(doil)
# ARIMAoil
# tsdiag(ARIMAoil)
ARIMAoil2=arima(doil,order=c(1,0,6))
ARIMAoil2
tsdiag(ARIMAoil2,gof=24)
# (g)
Oilpredict=predict(ARIMAoil2,4)
Oilpredict
lcl=Oilpredict$pred-1.96*Oilpredict$se
ucl=Oilpredict$pred+1.96*Oilpredict$se
cf=cbind(lcl,ucl)
cf
Oilforecast=forecast(ARIMAoil2,4)
Oilforecast
plot(Oilforecast)
# The next plot includes only the last 24 observations and labels
plot(Oilforecast,include=24,xlab="time",ylab="oil return",main="Prediction")
#Problem 4
require(forecast)
da=read.table("d-amzn3dx0914.txt",header=T)
head(da)
rt=log(da$amzn+1)*100
# (a)
t.test(rt)
# (b)
acf(rt)
Box.test(rt,lag=10,type='Ljung')
# (c)
library(rugarch)
garch.norm = ugarchspec(mean.model=list(armaOrder=c(0,0)),
variance.model=list(garchOrder=c(1,1)))
amazonGarch = ugarchfit(data=rt, spec=garch.norm)
show(amazonGarch)
plot(amazonGarch, which="all")
plot(amazonGarch, which=9)
plot(amazonGarch, which=10)
plot(amazonGarch, which=11)
# (d)
arma.garch.t = ugarchspec(mean.model=list(armaOrder=c(0,0)),
variance.model=list(garchOrder=c(1,1)),
distribution.model = "std")
amazonGarch.t = ugarchfit(data=rt, spec=arma.garch.t)
show(amazonGarch.t)
plot(amazonGarch.t, which="all")
plot(amazonGarch.t, which=9)
plot(amazonGarch.t, which=10)
plot(amazonGarch.t, which=11)
# (f)
amazonforecast=ugarchforecast(amazonGarch.t, data = rt, n.ahead = 5)
show(amazonforecast)
plot(amazonforecast,which=1)
plot(amazonforecast,which=3)
#Problem 5
FFfactors <- read.csv("FamaFrenchFactors.csv",header=T) # Load csv data with names.
head(FFfactors)  # See the first 6 rows
attach(FFfactors) #Now you can refer directly to the names of the variables.
#Note that you might receive a warning: "The following objects are masked from FFfactors ..."
# This just means that you are overwriting variables with these names that you have used before.
# For our purposes you can simply ignore this message.
names(FFfactors)
rf <- read.csv("RiskFreeRate.csv",header=T) # Load csv data with names.
head(rf)  # See the first 6 rows
sv <- read.csv("SizeValuePortfolios.csv",header=T) # Load csv data with names.
head(sv)  # See the first 6 rows
names(sv)
Industry=read.csv("IndustryPortfolios.csv",header=T) # Load csv data with names.
head(Industry)  # See the first 6 rows
names(Industry)
# (a)
Industry=Industry[,2:31]
attach(Industry) #Now you can refer directly to the names of the variables.
#Note that you might receive a warning: "The following objects are masked from..."
# This just means that you are overwriting variables with these names that you have used before.
# For our purposes you can simply ignore this message.
industrypca=prcomp(Industry)
summary(industrypca)
plot(industrypca)
# (b)
fitSteel=lm(Steel~industrypca$x[,1:3])
summary(fitSteel)
plot(Steel,fitSteel$fitted.values)
abline(c(0,1))
fitSteel2=lm(Steel~Mkt)
summary(fitSteel2)
plot(Steel,fitSteel2$fitted.values)
abline(c(0,1))
fitFood=lm(Food~industrypca$x[,1:3])
summary(fitFood)
plot(Food,fitFood$fitted.values)
abline(c(0,1))
fitFood2=lm(Steel~Mkt)
summary(fitFood2)
plot(Food,fitFood2$fitted.values)
abline(c(0,1))
# (d)
svrf=sv[,2:26]-rf$RF
# (e)
fit1=lm(svrf[[2]]~Mkt)
summary(fit1)
fit3=lm(svrf[[15]]~Mkt)
summary(fit3)
# (f)
fit2=lm(svrf[[2]]~Mkt+SMB+HML)
summary(fit2)
fit4=lm(svrf[[15]]~Mkt+SMB+HML)
summary(fit4)
# (g)
library(lmtest)
library(sandwich)
coeftest(fit1, vcov = vcov(fit1))
coeftest(fit1, vcov = NeweyWest(fit1))
coeftest(fit2, vcov = vcov(fit2))
coeftest(fit2, vcov = NeweyWest(fit2))
coeftest(fit3, vcov = vcov(fit3))
coeftest(fit3, vcov = NeweyWest(fit3))
coeftest(fit4, vcov = vcov(fit4))
coeftest(fit4, vcov = NeweyWest(fit4))
# (h)
pcasv=prcomp(svrf)
summary(pcasv)
plot(pcasv)
# (i)
fit5=lm(Mkt~pcasv$x[,(1:3)])
summary(fit5)
plot(Mkt,fit5$fitted.values,ylab="fitted values")
abline(c(0,1))
fit6=lm(SMB~pcasv$x[,(1:3)])
summary(fit6)
plot(SMB,fit6$fitted.values,ylab="fitted values")
abline(c(0,1))
fit7=lm(HML~pcasv$x[,(1:3)])
summary(fit7)
plot(HML,fit7$fitted.values,ylab="fitted values")
abline(c(0,1))
#### Problem 6
require(forecast)
da <- read.table("m-globaltemp.txt",header=T)
dd <- da[,2:13]
xt <- c(t(dd))
zt <- diff(xt)
length(xt)
tdx <- c(1:1632)/12+1880
# (a)
par(mfcol=c(2,1))
plot(tdx,xt,xlab='year',ylab='temp',type='l')
plot(tdx[-1],zt,xlab='year',ylab='diff(temp)',type='l')
par(mfcol=c(1,1))
# (b)
require(fUnitRoots)
adfTest(xt,lags=11,type="c")
adfTest(zt,lags=11,type="c")
# (c)
t.test(zt)
# (d)
par(mfcol=c(2,1))
acf(zt)
pacf(zt)
par(mfcol=c(1,1))
# (e)
Box.test(zt,lag=12,type='Ljung')
# (f)
ARtemp=auto.arima(zt,max.p = 20, max.q = 0,  d = 0)
ARtemp
tsdiag(ARtemp)
ARtemp2=arima(zt,order=c(11,0,0),include.mean=F)
ARtemp2
tsdiag(ARtemp2,gof=24)
# (g)
ARtemp3=arima(xt,order=c(11,1,0))
ARtemp3
PredictTemp <- predict(ARtemp3,12)
PredictTemp
# (h)
lcl <- PredictTemp$pred-1.96*PredictTemp$se
ucl <- PredictTemp$pred+1.96*PredictTemp$se
cf <- cbind(lcl,ucl)
cf[1:2,]
cf[1:12,]
# (i)
require(forecast)
ARIMAtemp=auto.arima(xt)
ARIMAtemp
tsdiag(ARIMAtemp,gof=24)
ARIMAtemp2=arima(zt,order=c(1,0,2),seasonal=list(order=c(1,0,0),period=12))
ARIMAtemp2
tsdiag(ARIMAtemp2,gof=24)
# (j)
ARIMAtemp3=arima(xt,order=c(1,1,2),seasonal=list(order=c(1,0,0),period=12))
ARIMAtemp3
tsdiag(ARIMAtemp3,gof=24)
PredictTemp=predict(ARIMAtemp3,12)
PredictTemp
lcl <- PredictTemp$pred-1.96*PredictTemp$se
ucl <- PredictTemp$pred+1.96*PredictTemp$se
cf <- cbind(lcl,ucl)
cf[1:2,]
cf[1:12,]
Tempforecast=forecast(ARIMAtemp3,12)
Tempforecast
plot(Tempforecast)
plot(Tempforecast,include=24,xlab="time",ylab="temperature",main="Prediction")
#Problem 7
da=read.table("d-sbux3dx-0715.txt",header=T)
head(da)
rtn=da[,3:6]
attach(rtn)
vw=log(da$vwretd+1)
# (a)
t.test(vw)
Box.test(vw,lag=12,type='Ljung')
acf(vw)
acf(vw^2)
garch.norm = ugarchspec(mean.model=list(armaOrder=c(0,0),include.mean = FALSE),
variance.model=list(garchOrder=c(1,1)))
vwGarch = ugarchfit(data=vw, spec=garch.norm)
show(vwGarch)
plot(vwGarch, which="all")
plot(vwGarch, which=9)
arma.garch.t = ugarchspec(mean.model=list(armaOrder=c(0,0),include.mean = FALSE),
variance.model=list(garchOrder=c(1,1)),
distribution.model = "std")
vwGarch.t = ugarchfit(data=vw, spec=arma.garch.t)
show(vwGarch.t)
plot(vwGarch.t, which="all")
plot(vwGarch.t, which=9)
# (b)
vwforecast=ugarchforecast(vwGarch.t, data = vw, n.ahead = 5)
show(vwforecast)
plot(vwforecast,which=1)
plot(vwforecast,which=3)
# (c)
arma.aparch.t = ugarchspec(mean.model=list(armaOrder=c(0,0),include.mean = FALSE),
variance.model=list(model="apARCH",
garchOrder=c(1,1)),
distribution.model = "std")
vwGarch.a = ugarchfit(data=vw, spec=arma.aparch.t)
show(vwGarch.a)
